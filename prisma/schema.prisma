// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  clerkUSerId     String            @unique
  email           String?           @unique
  name            String?
  password        String?
  imageUrl        String?
  industry        String?
  industryInsight IndustryInsights? @relation(fields: [industry], references: [industry])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt

  bio        String?
  experience Int?
  skills     String?

  assessments Assessment[]
  resume      Resume?
  coverLetter CoverLetter[]
}

model Assessment {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  quizScore      Float // Overall quiz score
  questions      Json[] // Array of {question, answer, userAnswer, isCorrect}
  category       String // "Technical", "Behavioral", etc.
  improvementTip String? // AI-generated improvement tip
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model Resume {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  content   String   @db.Text // Markdown content
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CoverLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User @relation(fields: [userId],references: [id])
  content        String
  jobDescription String?
  companyName    String
  jobTitle       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([userId])
}

model IndustryInsights {
  id       String   @id @default(cuid())
  industry String   @unique
  users   User[]

  salaryRanges Json[] // Salary range for the industry


  growthRate Float // Industry growth rate
  demandLevel DemandLevel // High, Medium, Low
  topSkills String[] // Array of top skills in the industry

  marketOutlook MarketOutlook // Market outlook for the industry
  keyTrends String[] // Array of key trends in the industry

  recommendedSkills String[] // Array of recommended skills for the industry

  lastUpdated DateTime @default(now()) // Last updated date for the insights
  nextUpdate DateTime // Next scheduled update date for the insights


  @@index([industry])


}

enum DemandLevel {
  HIGH
  MEDIUM
  LOW
}
enum MarketOutlook{
  POSITIVE
  NEUTRAL
  NEGATIVE
}

